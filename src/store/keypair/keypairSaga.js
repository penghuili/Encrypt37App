import { all, call, fork, put, select, takeLatest } from 'redux-saga/effects';

import { decryptText, encryptText, generateKeyPair } from '../../lib/encryption';
import { LocalStorage, LocalStorageKeys } from '../../lib/localstorage';
import { navigationRef } from '../../router/navigationRef';
import { routeNames } from '../../router/routes';
import { toastActionCreators } from '../toast/toastActions';
import { keypairActionCreators, keypairActionTypes } from './keypairActions';
import { keypairSelectors } from './keypairSelectors';

function* initApp() {
  const privateKey = yield call(LocalStorage.get, LocalStorageKeys.privateKey);
  if (privateKey) {
    yield put(keypairActionCreators.setPrivateKey(privateKey.trim()));
  }

  const publicKey = yield call(LocalStorage.get, LocalStorageKeys.publicKey);
  if (publicKey) {
    yield put(keypairActionCreators.setPublicKey(publicKey.trim()));
  }

  const hasDoneBackup = yield call(LocalStorage.get, LocalStorageKeys.hasDoneBackup);
  yield put(keypairActionCreators.setBackup(!!hasDoneBackup));

  yield put(keypairActionCreators.finishLoading());
}

function* handleNavigateToNewKeypairPressed() {
  yield call(navigationRef.navigate, routeNames.newKeypair);
}

function* handleNavigateToExistingKeypairPressed() {
  yield call(navigationRef.navigate, routeNames.existingKeypair);
}

function* handlePastePublicKeyPressed({ payload: { publicKey } }) {
  if (!publicKey) {
    return;
  }

  const trimmed = publicKey.trim();
  yield call(LocalStorage.set, LocalStorageKeys.publicKey, trimmed);
  yield put(keypairActionCreators.setPublicKey(trimmed));
}

function* handlePastePrivateKeyPressed({ payload: { privateKey } }) {
  if (!privateKey) {
    return;
  }

  const trimmed = privateKey.trim();
  yield call(LocalStorage.set, LocalStorageKeys.privateKey, trimmed);
  yield put(keypairActionCreators.setPrivateKey(trimmed));
}

function* handleFinishAddExistingKeypairPressed() {
  const publicKey = yield select(keypairSelectors.getPublicKey);
  const { data: encrypted } = yield call(encryptText, 'test', publicKey);
  if (!encrypted) {
    yield put(toastActionCreators.setToast('Provide a valid key pair that generated by this app.'));
    return;
  }

  const privateKey = yield select(keypairSelectors.getPrivateKey);
  const { data: decrypted } = yield call(decryptText, encrypted, privateKey);
  if (decrypted !== 'test') {
    yield put(toastActionCreators.setToast('Provide a valid key pair that generated by this app.'));
    return;
  }

  yield call(handleFinishBackupPressed);
}

function* handleGenerateKeypairPressed() {
  const keypair = yield call(generateKeyPair);
  yield call(LocalStorage.set, LocalStorageKeys.privateKey, keypair.privateKey);
  yield call(LocalStorage.set, LocalStorageKeys.publicKey, keypair.publicKey);
  yield put(keypairActionCreators.setPrivateKey(keypair.privateKey));
  yield put(keypairActionCreators.setPublicKey(keypair.publicKey));
}

function* handleDeleteKeypairPressed() {
  yield call(LocalStorage.remove, LocalStorageKeys.privateKey);
  yield call(LocalStorage.remove, LocalStorageKeys.publicKey);
  yield call(LocalStorage.remove, LocalStorageKeys.hasDoneBackup);
  yield put(keypairActionCreators.setPrivateKey(''));
  yield put(keypairActionCreators.setPublicKey(''));
  yield put(keypairActionCreators.setBackup(false));

  yield put(toastActionCreators.setToast('Key pair is deleted.'));
}

function* handleFinishBackupPressed() {
  yield call(LocalStorage.set, LocalStorageKeys.hasDoneBackup, true);
  yield put(keypairActionCreators.setBackup(true));
}

export function* keypairSagas() {
  yield fork(initApp);

  yield all([
    takeLatest(
      keypairActionTypes.NAVIGATE_TO_NEW_KEYPAIR_PRESSED,
      handleNavigateToNewKeypairPressed
    ),
    takeLatest(
      keypairActionTypes.NAVIGATE_TO_EXISTING_KEYPAIR_PRESSED,
      handleNavigateToExistingKeypairPressed
    ),
    takeLatest(keypairActionTypes.PASTE_PUBLIC_KEY_PRESSED, handlePastePublicKeyPressed),
    takeLatest(keypairActionTypes.PASTE_PRIVATE_KEY_PRESSED, handlePastePrivateKeyPressed),
    takeLatest(
      keypairActionTypes.FINISH_ADD_EXISTING_KEYPAIR_PRESSED,
      handleFinishAddExistingKeypairPressed
    ),
    takeLatest(keypairActionTypes.GENERATE_KEYPAIR_PRESSED, handleGenerateKeypairPressed),
    takeLatest(keypairActionTypes.DELETE_KEYPAIR_PRESSED, handleDeleteKeypairPressed),
    takeLatest(keypairActionTypes.FINISH_BACKUP_PRESSED, handleFinishBackupPressed),
  ]);
}
